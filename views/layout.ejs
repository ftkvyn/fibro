<!DOCTYPE html>
<html ng-app='fibro'>
  <head>
    
      <title>Project Fellows</title>
    
    <link href='http://fonts.googleapis.com/css?family=Arvo:400,700' rel='stylesheet' type='text/css'>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/ng-modal.css">
    <link rel="stylesheet" href="/styles/styles.css">
    <!--STYLES END-->
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bootstrap/css/bootstrap-theme.min.css">
    
    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/flow.min.js"></script>
    <script src="/js/angular/angular.min.js"></script>
    <script src="/js/angular/ng-flow.min.js"></script>
    <script src="/js/angular/ng-modal.min.js"></script>
    <script src="/js/app/app.js"></script>
    <script src="/js/app/controllers/authController.js"></script>
    <script src="/js/app/controllers/chatCtrl.js"></script>
    <script src="/js/app/controllers/chatListCtrl.js"></script>
    <script src="/js/app/controllers/commentController.js"></script>
    <script src="/js/app/controllers/inviteController.js"></script>
    <script src="/js/app/controllers/membershipRequestController.js"></script>
    <script src="/js/app/controllers/notificationsCtrl.js"></script>
    <script src="/js/app/controllers/pofileController.js"></script>
    <script src="/js/app/controllers/postController.js"></script>
    <script src="/js/app/controllers/projectController.js"></script>
    <script src="/js/app/controllers/searchController.js"></script>
    <script src="/js/app/directives/inviteDirective.js"></script>
    <!--SCRIPTS END-->
    <script src='/bootstrap/js/jquery-2.1.1.min.js'></script>
    
    <script src="http://js.nicedit.com/nicEdit-latest.js" type="text/javascript"></script>
    
                

  </head>

  <body>
    <% if(currentUser) { %>
    <div class='fibro-header' ng-controller='NotificationsController'>
    <% } else { %>
    <div class='fibro-header'>
    <% } %>
    
      <div class='logo'>
        <a href="/">
          <h1>Project Fellows</h1>
        </a>
      </div>
      <div class='header-menu'>
        <a href="/search/project">
          Projects  <div class='invitations notification ng-hide'
           ng-show='invitations'>
           {{invitations}}
         </div>
        </a>
        <a href="/search/user">
          People  <div class='requests notification ng-hide'
           ng-show='requests'>
           {{requests}}
         </div>
        </a>
        <a href="/ideas">
          Ideas
        </a>
        <% if(currentUser) { %>
        <a href="/chats">
          Chats <div class='unread-chats notification ng-hide'
           ng-show='unreadChats'>
           {{unreadChats}}
         </div>
        </a>
        <% } %>        
        <a href="/news">
          News
        </a>
        <a href="/about">
          About
        </a>
      </div>
      <div 
      ng-controller='AuthController as auth'
      class='account-info'>
        <% if(currentUser) { %>
          <a href="/profile/<%= currentUser.id %>"> <strong>
            <%= (currentUser.name || "Unknown") %>
          </strong></a>
          <a href="/auth/logout">Log off</a>
        <% } else { %>
          <modal-dialog     
          class='auth-popup'
          show='auth.loginPopup' 
          dialog-title='Log in'>
            <div class='ng-hide' ng-show='auth.loginPopup'>
            <div style='margin:5px;'>
              <a href="/auth/facebook" class='fb-button-link'>
                <div class='fb-button-box'>
                  <img src="/images/facebook_logo.png">
                  <span>Log in with facebook</span>
                </div>
              </a>
              <hr/>
              <div class='message' ng-show='auth.message'>
                <span>{{auth.message}}</span>
              </div>
              <span style='font-size:130%;'>or using your E-mail</span><br/>

              <input placeholder='E-mail'
                id='email' name='email'
                ng-model='auth.model.email'
                type='email'></input>
              <input placeholder='Password' 
                ng-model='auth.model.password'
                id='password' name='password'
                type='password'></input><br/>
              <a ng-click='auth.resetPassword()'>Recover password</a>
            
            </div>
            <button ng-click='auth.login()' 
             class='btn btn-success'>Enter</button>
            <button ng-click='auth.loginPopup = false' 
             class='btn btn-warning'>Cancel</button>
             </div>
          </modal-dialog>    

           <modal-dialog     
          class='auth-popup'
          show='auth.registerPopup' 
          dialog-title='Register'>
            <div class='ng-hide' ng-show='auth.registerPopup'>
            <div style='margin:5px;'>
              <a href="/auth/facebook" class='fb-button-link'>
                <div class='fb-button-box'>
                  <img src="/images/facebook_logo.png">
                  <span>Register with facebook</span>
                </div>
              </a>
              <hr/>
              <div class='message' ng-show='auth.message'>
                <span>{{auth.message}}</span>
              </div>
              <span style='font-size:130%;'>or using your E-mail</span><br/>

              <input placeholder='E-mail'
                id='email' name='email'
                ng-model='auth.model.email'
                type='email'></input><br/>
              <input placeholder='Password' 
                ng-model='auth.model.password'
                id='password' name='password'
                type='password'></input><br/>
              <input placeholder='Confim password' 
                ng-model='auth.model.passwordConfirm'
                id='passwordConfirm' name='passwordConfirm'
                type='password'></input><br/>
            </div>
            
            
            <button ng-click='auth.register()' 
            ng-disabled='!auth.model.password || (auth.model.passwordConfirm != auth.model.password)'
             class='btn btn-success'>Register</button>
            <button ng-click='auth.registerPopup = false' 
             class='btn btn-warning'>Cancel</button>
             </div>
          </modal-dialog>   

          <a ng-click='auth.loginPopup = true'>Log in</a> | 
          <a ng-click='auth.registerPopup = true'>Register</a>
        
          <% } %>        
        </div>
      </div>
    </div>

    <div class='fibro-content'>
      <%- body %>
    </div>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    
  </body>
  <footer>
    <div class='fibro-footer'>
      &copy; Andrei Marchenko, planet Earth, 2014
   </div>
  </footer>
</html>
