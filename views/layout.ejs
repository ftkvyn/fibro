<!DOCTYPE html>
<html ng-app='fibro'>
  <head>
    
      <title>Find Bro</title>
    
    <link href='http://fonts.googleapis.com/css?family=Arvo:400,700' rel='stylesheet' type='text/css'>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    
    <!--  
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.
        
        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:
            
            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/styles.css">
    <!--STYLES END-->
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/bootstrap/css/bootstrap-theme.min.css">
    
    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/angular/angular.min.js"></script>
    <script src="/js/app/app.js"></script>
    <script src="/js/app/controllers/chatCtrl.js"></script>
    <script src="/js/app/controllers/chatListCtrl.js"></script>
    <script src="/js/app/controllers/inviteController.js"></script>
    <script src="/js/app/controllers/membershipRequestController.js"></script>
    <script src="/js/app/controllers/pofileController.js"></script>
    <script src="/js/app/controllers/postController.js"></script>
    <script src="/js/app/controllers/projectController.js"></script>
    <script src="/js/app/controllers/searchController.js"></script>
    <script src="/js/app/directives/inviteDirective.js"></script>
    <script src="/js/handlebars/handlebars-v1.3.0.js"></script>
    <!--SCRIPTS END-->
    <script src='/bootstrap/js/jquery-2.1.1.min.js'></script>
    

  </head>

  <body>
    <div class='fibro-header'>
      <a href="/">
        <h1>Find your Bro!</h1>
      </a>
      <div class='account-info'>
        <% if(currentUser) { %>
          <a href="/profile/<%= currentUser.id %>"> <strong><%= currentUser.name %></strong></a>
          <a href="/auth/logout">Logout</a>
        <% } else { %>
          <a href="/auth/facebook">Login with Facebook</a>
        <% } %>        
      </div>
    </div>

    <div class='fibro-content'>
      <%- body %>
    </div>


    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).
        
        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.
      
      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:
          
          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    
  </body>
  <footer>
    <div class='fibro-footer'>
      &copy; Andrei Marchenko, Poznan, Poland, 2014
   </div>
  </footer>
</html>
